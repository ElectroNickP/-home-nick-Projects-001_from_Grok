"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import logging
import time
from typing import Any

import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s: %(message)s",
    handlers=[logging.FileHandler("tests/test.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class TestLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""

    @staticmethod
    def info(message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        logger.info(f"‚ÑπÔ∏è {message}")

    @staticmethod
    def success(message: str):
        """–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        logger.info(f"‚úÖ {message}")

    @staticmethod
    def error(message: str):
        """–û—à–∏–±–∫–∞"""
        logger.error(f"‚ùå {message}")

    @staticmethod
    def warning(message: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        logger.warning(f"‚ö†Ô∏è {message}")

    @staticmethod
    def debug(message: str):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        logger.debug(f"üîç {message}")


class TestHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    @staticmethod
    def wait_for_element(condition_func, timeout: int = 10, interval: float = 0.5):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            if condition_func():
                return True
            time.sleep(interval)
        return False

    @staticmethod
    def retry_request(request_func, max_attempts: int = 3, delay: float = 1.0):
        """–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        for attempt in range(max_attempts):
            try:
                response = request_func()
                if response.status_code < 500:  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    return response
            except Exception as e:
                TestLogger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

            if attempt < max_attempts - 1:
                time.sleep(delay)

        return None

    @staticmethod
    def validate_response(response: requests.Response, expected_status: int = 200):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        if response.status_code != expected_status:
            TestLogger.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è: {expected_status}"
            )
            return False

        try:
            response.json()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç - –≤–∞–ª–∏–¥–Ω—ã–π JSON
            return True
        except json.JSONDecodeError:
            TestLogger.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
            return False

    @staticmethod
    def extract_bot_id_from_response(response: requests.Response) -> int | None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –±–æ—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        try:
            data = response.json()
            if isinstance(data, dict):
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                bot_id = data.get("bot_id") or data.get("data", {}).get("bot_id") or data.get("id")
                return int(bot_id) if bot_id else None
        except (json.JSONDecodeError, ValueError, TypeError):
            pass
        return None


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.start_time = None
        self.end_time = None

    def start(self):
        """–ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        self.start_time = time.time()

    def stop(self):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        self.end_time = time.time()

    def get_duration(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0.0

    def is_within_limit(self, limit: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞"""
        duration = self.get_duration()
        return duration <= limit


class TestDataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    @staticmethod
    def generate_bot_config(bot_name: str = None) -> dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        if not bot_name:
            bot_name = f"TestBot_{int(time.time())}"

        return {
            "bot_name": bot_name,
            "telegram_token": f"1234567890:ABCdefGHIjklMNOpqrsTUVwxyz_{int(time.time())}",
            "openai_api_key": f"sk-test1234567890abcdefghijklmnopqrstuvwxyz_{int(time.time())}",
            "assistant_id": f"asst_test1234567890abcdefghijklmnopqrstuvwxyz_{int(time.time())}",
            "group_context_limit": 15,
            "enable_voice_responses": False,
            "enable_ai_responses": True,
            "marketplace": {
                "enabled": True,
                "title": bot_name,
                "description": f"Test bot {bot_name} for testing",
                "category": "testing",
                "username": f"@{bot_name.lower()}",
                "tags": ["test", "demo", "automated"],
            },
        }

    @staticmethod
    def generate_marketplace_data() -> dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        timestamp = int(time.time())
        return {
            "enabled": True,
            "title": f"Test Bot {timestamp}",
            "description": f"Automated test bot {timestamp}",
            "category": "testing",
            "username": f"@testbot{timestamp}",
            "website": f"https://test{timestamp}.com",
            "image_url": f"https://example.com/bot{timestamp}.jpg",
            "tags": ["test", "automated", "demo"],
            "featured": False,
            "rating": 4.5,
            "total_users": 100,
        }


class AssertionHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫"""

    @staticmethod
    def assert_response_structure(response: requests.Response, required_fields: list):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"""
        try:
            data = response.json()
            for field in required_fields:
                assert field in data, f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ"
        except json.JSONDecodeError:
            assert False, "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"

    @staticmethod
    def assert_bot_status(response: requests.Response, expected_status: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            data = response.json()
            actual_status = data.get("status", data.get("data", {}).get("status"))
            assert (
                actual_status == expected_status
            ), f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {actual_status}, –æ–∂–∏–¥–∞–ª—Å—è: {expected_status}"
        except json.JSONDecodeError:
            assert False, "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"

    @staticmethod
    def assert_marketplace_bot(response: requests.Response, expected_enabled: bool = True):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ"""
        try:
            data = response.json()
            marketplace_data = data.get("marketplace", {})
            actual_enabled = marketplace_data.get("enabled", False)
            assert (
                actual_enabled == expected_enabled
            ), f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {actual_enabled}, –æ–∂–∏–¥–∞–ª—Å—è: {expected_enabled}"
        except json.JSONDecodeError:
            assert False, "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
test_logger = TestLogger()
test_helper = TestHelper()
performance_monitor = PerformanceMonitor()
test_data_generator = TestDataGenerator()
assertion_helper = AssertionHelper()
