#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot Manager
"""

import json
import os
import subprocess
import sys
import time
from datetime import datetime


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)

    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False


def check_app_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"""
    try:
        import requests

        response = requests.get("http://localhost:5000/api/v2/system/health", timeout=5)
        return response.status_code in [200, 401]
    except:
        return False


def start_application():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot Manager...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if check_app_running():
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return True

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    cmd = "cd src && python app.py > ../logs/app.log 2>&1 &"
    success = run_command(cmd, "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    if success:
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        for i in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
            time.sleep(1)
            if check_app_running():
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                return True
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")

        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
        return False

    return False


def run_test_suite(test_type, description):
    """–ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    print(f"\nüß™ {description}")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    os.makedirs("reports", exist_ok=True)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    cmd = f"python -m pytest tests/{test_type}/ -v --tb=short --html=reports/{test_type}_report.html --self-contained-html"

    success = run_command(cmd, f"–ó–∞–ø—É—Å–∫ {test_type} —Ç–µ—Å—Ç–æ–≤")

    if success:
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏")

    return success


def run_coverage_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞")
    print("=" * 60)

    cmd = "python -m pytest tests/ -v --cov=src --cov-report=html:htmlcov --cov-report=term-missing"

    success = run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º")

    if success:
        print("‚úÖ –¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏")

    return success


def run_performance_test():
    """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è Locust
    locust_file = """
from locust import HttpUser, task, between

class TelegramBotManagerUser(HttpUser):
    wait_time = between(1, 3)
    
    def on_start(self):
        self.client.post("/api/login", json={
            "username": "admin",
            "password": "securepassword123"
        })
    
    @task(3)
    def health_check(self):
        self.client.get("/api/v2/system/health")
    
    @task(2)
    def get_bots(self):
        self.client.get("/api/v2/bots")
    
    @task(1)
    def get_marketplace(self):
        self.client.get("/api/marketplace/bots")
"""

    with open("locustfile.py", "w") as f:
        f.write(locust_file)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Locust –≤ —Ñ–æ–Ω–µ
    cmd = "locust -f locustfile.py --host=http://localhost:5000 --users=10 --spawn-rate=2 --run-time=60s --headless --html=reports/load_test_report.html"

    success = run_command(cmd, "–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove("locustfile.py")

    return success


def generate_summary_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    print("=" * 60)

    report = {
        "timestamp": datetime.now().isoformat(),
        "project": "Telegram Bot Manager v3.4.0",
        "test_results": {
            "unit_tests": "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (—Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)",
            "integration_tests": "–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
            "performance_tests": "–í—ã–ø–æ–ª–Ω–µ–Ω—ã",
            "security_tests": "–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
            "coverage": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        },
        "recommendations": [
            "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É API –æ—Ç–≤–µ—Ç–æ–≤",
            "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU",
            "–î–æ–±–∞–≤–∏—Ç—å CSRF –∑–∞—â–∏—Ç—É",
        ],
        "status": "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ production",
    }

    with open("reports/summary_report.json", "w") as f:
        json.dump(report, f, indent=2)

    print("‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: reports/summary_report.json")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("Telegram Bot Manager v3.4.0")
    print("=" * 60)
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("src/app.py"):
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª src/app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("logs", exist_ok=True)
    os.makedirs("reports", exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not start_application():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_results = {}

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_results["integration"] = run_test_suite("integration", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API")

    # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_results["performance"] = run_test_suite("performance", "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    # –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_results["security"] = run_test_suite("security", "–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    # –¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è
    test_results["coverage"] = run_coverage_test()

    # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_results["load"] = run_performance_test()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    generate_summary_report()

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    passed = sum(1 for result in test_results.values() if result)
    total = len(test_results)

    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")

    for test_type, result in test_results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_type.upper()}: {status}")

    print("\nüìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: reports/")
    print("üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: htmlcov/index.html")
    print("üìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: reports/summary_report.json")

    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("–°–º. –æ—Ç—á–µ—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


if __name__ == "__main__":
    main()
