name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        test-type: [unit, integration, e2e, performance]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        pip install playwright locust psutil
    
    - name: Install Playwright browsers
      if: matrix.test-type == 'e2e'
      run: playwright install
    
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/entrypoints/unit/ -v --cov=core --cov=adapters --cov=apps --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/entrypoints/integration/ -v --cov=core --cov=adapters --cov=apps --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run E2E Tests
      if: matrix.test-type == 'e2e'
      run: |
        pytest tests/entrypoints/e2e/ -v --cov=core --cov=adapters --cov=apps --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run Performance Tests
      if: matrix.test-type == 'performance'
      run: |
        pytest tests/entrypoints/performance/ -v --cov=core --cov=adapters --cov=apps --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-tests
        fail_ci_if_error: false

  test-all:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        pip install playwright locust psutil
    
    - name: Install Playwright browsers
      run: playwright install
    
    - name: Run All Tests
      run: |
        pytest tests/entrypoints/ -v --cov=core --cov=adapters --cov=apps --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Generate Test Report
      run: |
        pytest tests/entrypoints/ --html=reports/test_report.html --self-contained-html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: reports/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: all-tests
        name: all-tests
        fail_ci_if_error: false

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: test-all
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust psutil
    
    - name: Run Performance Benchmarks
      run: |
        locust -f tests/entrypoints/performance/test_api_performance.py --headless --users 10 --spawn-rate 2 --run-time 30s --html=reports/performance_report.html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: reports/performance_report.html

  security-scan:
    runs-on: ubuntu-latest
    needs: test-all
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Security Scan
      run: |
        bandit -r core/ adapters/ apps/ -f json -o reports/security_scan.json
        safety check --json --output reports/safety_check.json
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports/security_*.json

  notify:
    runs-on: ubuntu-latest
    needs: [test-all, performance-benchmark, security-scan]
    if: always()
    
    steps:
    - name: Notify on Success
      if: success()
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üìä Coverage reports generated"
        echo "üöÄ Performance benchmarks completed"
        echo "üîí Security scan completed"
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Some tests failed!"
        echo "Please check the test reports for details"








