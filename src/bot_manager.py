import asyncio
import threading
import logging
from telegram_bot import aiogram_bot
from config_manager import BOT_CONFIGS, BOT_CONFIGS_LOCK

logger = logging.getLogger(__name__)

def run_bot(bot_entry):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π asyncio."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    bot_entry["loop"] = loop
    bot_entry["status"] = "running"
    stop_event = asyncio.Event()
    bot_entry["stop_event"] = stop_event

    try:
        loop.run_until_complete(aiogram_bot(bot_entry["config"], stop_event))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞ {bot_entry['config'].get('bot_name', '')}:")
    finally:
        bot_entry["status"] = "stopped"
        bot_entry["loop"] = None
        bot_entry["thread"] = None
        bot_entry["stop_event"] = None
        loop.close()

def start_bot_thread(bot_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞."""
    with BOT_CONFIGS_LOCK:
        if bot_id not in BOT_CONFIGS:
            logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False, "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        bot_entry = BOT_CONFIGS[bot_id]
        if bot_entry.get("status") == "running":
            logger.warning(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"

        thread = threading.Thread(target=run_bot, args=(bot_entry,), daemon=True)
        bot_entry["thread"] = thread
        thread.start()
        logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        return True, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"

def stop_bot_thread(bot_id):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞."""
    with BOT_CONFIGS_LOCK:
        if bot_id not in BOT_CONFIGS:
            logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False, "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        bot_entry = BOT_CONFIGS[bot_id]
        if bot_entry.get("status") != "running":
            logger.warning(f"–ë–æ—Ç {bot_id} –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"

        if bot_entry.get("loop") and bot_entry.get("stop_event"):
            bot_entry["loop"].call_soon_threadsafe(bot_entry["stop_event"].set)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞ {bot_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return True, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ loop –∏–ª–∏ stop_event –¥–ª—è –±–æ—Ç–∞ {bot_id}.")
            return False, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"

def stop_all_bots_for_update(total_timeout=30):
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è deadlock'–æ–≤.
    """
    import time
    
    start_time = time.time()
    logger.info("üõë –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –ë–ï–ó –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    try:
        with BOT_CONFIGS_LOCK:
            active_bots = []
            for bot_id, bot_data in BOT_CONFIGS.items():
                if bot_data.get("status") == "running":
                    active_bots.append(bot_id)
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        if not active_bots:
            logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return True, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}"
    
    # –®–∞–≥ 2: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    stopped_count = 0
    failed_bots = []
    
    for bot_id in active_bots:
        elapsed = time.time() - start_time
        remaining_timeout = max(1, total_timeout - elapsed)
        
        if elapsed >= total_timeout:
            logger.warning(f"‚è∞ –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç {total_timeout}s –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–æ—Ç–æ–≤")
            break
            
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
        bot_timeout = min(5, remaining_timeout / len(active_bots))
        
        logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ {bot_id} (timeout: {bot_timeout:.1f}s)")
        
        try:
            success, message = stop_bot_thread(bot_id, wait_timeout=bot_timeout)
            if success:
                stopped_count += 1
                logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message}")
            else:
                failed_bots.append(bot_id)
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ {bot_id}: {message}")
                
        except Exception as e:
            failed_bots.append(bot_id)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
    
    # –®–∞–≥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    if failed_bots:
        logger.warning(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ {len(failed_bots)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤")
        try:
            with BOT_CONFIGS_LOCK:
                for bot_id in failed_bots:
                    if bot_id in BOT_CONFIGS:
                        BOT_CONFIGS[bot_id].update({
                            "status": "stopped",
                            "thread": None,
                            "loop": None,
                            "stop_event": None
                        })
                        logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –±–æ—Ç {bot_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    total_time = time.time() - start_time
    logger.info(f"üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}s: —É—Å–ø–µ—à–Ω–æ={stopped_count}, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ={len(failed_bots)}")
    
    if stopped_count + len(failed_bots) == len(active_bots):
        return True, f"–í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({stopped_count} –Ω–æ—Ä–º–∞–ª—å–Ω–æ, {len(failed_bots)} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
    else:
        return False, f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {stopped_count}/{len(active_bots)} –±–æ—Ç–æ–≤"

def start_all_bots():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'stopped'."""
    with BOT_CONFIGS_LOCK:
        bot_ids = list(BOT_CONFIGS.keys())
    for bot_id in bot_ids:
        start_bot_thread(bot_id)
