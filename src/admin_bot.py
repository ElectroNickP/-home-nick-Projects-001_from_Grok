#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Bot Manager
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import logging
from datetime import datetime

import psutil
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import bot_manager as bm
import config_manager as cm

logger = logging.getLogger(__name__)


class AdminBot:
    """–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º"""

    def __init__(self, token: str, admin_users: list, notifications: dict = None):
        self.bot = Bot(token)
        self.admin_users = set(admin_users)
        self.dp = Dispatcher()
        self.notifications = notifications or {}
        self.is_running = False
        self.monitoring_task = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()

        logger.info(f"AdminBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(self.admin_users)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ü–ï–†–í–´–ú–ò –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞!)
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_bots, Command("bots"))
        self.dp.message.register(self.cmd_stats, Command("stats"))
        self.dp.message.register(self.cmd_control, Command("control"))
        self.dp.message.register(self.cmd_update, Command("update"))
        self.dp.message.register(self.cmd_backup, Command("backup"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.handle_callback)
        
        # Debug –æ—Ç–∫–ª—é—á–µ–Ω - –º–µ—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AdminBot –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def debug_all_messages(self, message: types.Message):
        """Debug: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = message.from_user
        logger.info(f"üîî –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username or 'None'}) {user.first_name or ''}")
        logger.info(f"üîî –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}, chat_id: {message.chat.id}")
        # –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: user_id={user_id} (—Ç–∏–ø: {type(user_id)}), admin_users={self.admin_users}")
        result = user_id in self.admin_users
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
        return result

    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
        if not self.is_admin(message.from_user.id):
            logger.warning(f"‚õî –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
            return

        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        await self.show_main_menu(message)

    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
        total_bots = len(cm.BOT_CONFIGS)
        running_bots = sum(1 for bot in cm.BOT_CONFIGS.values() if bot.get("status") == "running")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        try:
            import psutil
            cpu_percent = psutil.cpu_percent()
            if cpu_percent > 80:
                system_emoji = "üî¥"
                system_status = "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
            elif cpu_percent > 60:
                system_emoji = "üü°"
                system_status = "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"
            else:
                system_emoji = "üü¢"
                system_status = "–°—Ç–∞–±–∏–ª—å–Ω–æ"
        except:
            system_emoji = "‚ö™"
            system_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        keyboard = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        keyboard.add(InlineKeyboardButton(
            text=f"üìä –°–∏—Å—Ç–µ–º–∞ {system_emoji}", 
            callback_data="menu_system"
        ))
        keyboard.add(InlineKeyboardButton(
            text=f"ü§ñ –ë–æ—Ç—ã ({running_bots}/{total_bots})", 
            callback_data="menu_bots"
        ))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.add(InlineKeyboardButton(
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", 
            callback_data="menu_quick"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
            callback_data="menu_monitoring"
        ))
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.add(InlineKeyboardButton(
            text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            callback_data="menu_settings"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìã –õ–æ–≥–∏", 
            callback_data="menu_logs"
        ))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        keyboard.add(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            callback_data="refresh_main"
        ))
        
        keyboard.adjust(2, 2, 2, 1)

        menu_text = f"""üîÆ **ELECTRONICK Bot Manager**

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:** {system_emoji} {system_status}
ü§ñ **–ë–æ—Ç—ã:** {running_bots} –∏–∑ {total_bots} —Ä–∞–±–æ—Ç–∞—é—Ç
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üëÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

        try:
            await message.edit_text(
                menu_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown",
            )
        except:
            await message.answer(
                menu_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown",
            )

    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        if not self.is_admin(message.from_user.id):
            return

        help_text = """
üîÆ **ELECTRONICK Bot Manager - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
/bots - –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/control - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º
/update - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
/backup - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üîî –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (>80%)
üö® –û—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–æ–≤
üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        """

        await message.answer(help_text, parse_mode="Markdown")

    async def cmd_status(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.is_admin(message.from_user.id):
            return

        status_text = await self.get_system_status()
        await message.answer(status_text, parse_mode="Markdown")

    async def cmd_bots(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /bots - —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤"""
        if not self.is_admin(message.from_user.id):
            return

        bots_text, keyboard = await self.get_bots_list()
        await message.answer(bots_text, reply_markup=keyboard, parse_mode="Markdown")

    async def cmd_stats(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not self.is_admin(message.from_user.id):
            return

        stats_text = await self.get_detailed_stats()
        await message.answer(stats_text, parse_mode="Markdown")

    async def cmd_control(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /control - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º"""
        if not self.is_admin(message.from_user.id):
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if not args:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /control <bot_id> <action>\n"
                "–î–µ–π—Å—Ç–≤–∏—è: start, stop, restart, info\n"
                "–ü—Ä–∏–º–µ—Ä: /control 1 start"
            )
            return

        try:
            bot_id = int(args[0])
            action = args[1] if len(args) > 1 else "info"

            result = await self.control_bot(bot_id, action)
            await message.answer(result, parse_mode="Markdown")

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_update(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /update - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.is_admin(message.from_user.id):
            return

        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")

    async def cmd_backup(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /backup - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏"""
        if not self.is_admin(message.from_user.id):
            return

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backup_create"))
        keyboard.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="backup_list"))
        keyboard.add(InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="backup_cleanup"))
        keyboard.adjust(1)

        await message.answer(
            "üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown",
        )

    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        if not self.is_admin(callback.from_user.id):
            await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        data = callback.data

        try:
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            if data == "refresh_main":
                await self.show_main_menu(callback.message)
                await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
                
            elif data == "back_to_main":
                await self.show_main_menu(callback.message)
                await callback.answer()

            # –ü–æ–¥–º–µ–Ω—é
            elif data == "menu_system":
                await self.show_system_menu(callback.message)
                await callback.answer()
                
            elif data == "menu_bots":
                await self.show_bots_menu(callback.message)
                await callback.answer()
                
            elif data == "menu_quick":
                await self.show_quick_actions_menu(callback.message)
                await callback.answer()
                
            elif data == "menu_monitoring":
                await self.show_monitoring_menu(callback.message)
                await callback.answer()
                
            elif data == "menu_settings":
                await self.show_settings_menu(callback.message)
                await callback.answer()
                
            elif data == "menu_logs":
                await self.show_logs_menu(callback.message)
                await callback.answer()

            # –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            elif data == "status":
                status_text = await self.get_system_status()
                keyboard = InlineKeyboardBuilder()
                keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                await callback.message.edit_text(
                    status_text + "\n\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            elif data == "bots":
                bots_text, keyboard = await self.get_bots_list()
                await callback.message.edit_text(
                    bots_text, reply_markup=keyboard, parse_mode="Markdown"
                )

            elif data == "stats":
                stats_text = await self.get_detailed_stats()
                keyboard = InlineKeyboardBuilder()
                keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                await callback.message.edit_text(
                    stats_text + "\n\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            elif data == "admin":
                await self.show_admin_menu(callback.message)

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
            elif data.startswith("start_bot_"):
                bot_id = int(data.split("_")[2])
                result = await self.control_bot(bot_id, "start")
                await callback.answer(result, show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ—Ç–æ–≤
                await self.show_bots_menu(callback.message)

            elif data.startswith("stop_bot_"):
                bot_id = int(data.split("_")[2])
                result = await self.control_bot(bot_id, "stop")
                await callback.answer(result, show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ—Ç–æ–≤
                await self.show_bots_menu(callback.message)
                
            elif data.startswith("restart_bot_"):
                bot_id = int(data.split("_")[2])
                result = await self.control_bot(bot_id, "restart")
                await callback.answer(result, show_alert=True)
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–æ—Ç–æ–≤
                await self.show_bots_menu(callback.message)
                
            elif data.startswith("info_bot_"):
                bot_id = int(data.split("_")[2])
                result = await self.control_bot(bot_id, "info")
                keyboard = InlineKeyboardBuilder()
                keyboard.add(InlineKeyboardButton(text="ü§ñ –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="menu_bots"))
                keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                keyboard.adjust(1)
                await callback.message.edit_text(
                    result + "\n\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )

            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            elif data == "quick_start_all":
                await self.quick_start_all_bots(callback)
                
            elif data == "quick_stop_all":
                await self.quick_stop_all_bots(callback)
                
            elif data == "quick_restart_all":
                await self.quick_restart_all_bots(callback)
                
            elif data == "quick_clear_logs":
                await callback.answer("üßπ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif data == "system_resources":
                await self.show_system_resources(callback.message)
                
            elif data == "system_processes":
                await self.show_system_processes(callback.message)

            elif data.startswith("backup_"):
                await self.handle_backup_callback(callback, data)

            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_system_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status"))
        keyboard.add(InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
        keyboard.add(InlineKeyboardButton(text="üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤", callback_data="system_resources"))
        keyboard.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="system_processes"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        keyboard.adjust(2, 2, 1)

        await message.edit_text(
            "üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def show_bots_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
        try:
            bots_text = "ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏**\n\n"
            keyboard = InlineKeyboardBuilder()

            if not cm.BOT_CONFIGS:
                bots_text += "üì≠ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                await message.edit_text(bots_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
                return

            running_count = 0
            stopped_count = 0

            for bot_id, bot_data in cm.BOT_CONFIGS.items():
                status = bot_data.get("status", "stopped")
                bot_name = bot_data["config"].get("bot_name", f"Bot {bot_id}")
                
                if status == "running":
                    status_emoji = "üü¢"
                    running_count += 1
                else:
                    status_emoji = "üî¥" 
                    stopped_count += 1

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–æ—Ç–æ–º
                bots_text += f"{status_emoji} **{bot_name}** (ID: {bot_id})\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                if status == "running":
                    keyboard.add(InlineKeyboardButton(
                        text=f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {bot_name[:15]}...", 
                        callback_data=f"stop_bot_{bot_id}"
                    ))
                    keyboard.add(InlineKeyboardButton(
                        text=f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {bot_name[:15]}...", 
                        callback_data=f"restart_bot_{bot_id}"
                    ))
                else:
                    keyboard.add(InlineKeyboardButton(
                        text=f"üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å {bot_name[:15]}...", 
                        callback_data=f"start_bot_{bot_id}"
                    ))
                    keyboard.add(InlineKeyboardButton(
                        text=f"‚ÑπÔ∏è –ò–Ω—Ñ–æ {bot_name[:15]}...", 
                        callback_data=f"info_bot_{bot_id}"
                    ))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            bots_text += f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {running_count} —Ä–∞–±–æ—Ç–∞–µ—Ç, {stopped_count} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            # –ö–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.add(InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="menu_quick"))
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="menu_bots"))
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: –ø–æ 2 –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            bot_buttons_count = len(cm.BOT_CONFIGS) * 2
            adjust_pattern = [2] * (bot_buttons_count // 2)
            if bot_buttons_count % 2:
                adjust_pattern.append(1)
            adjust_pattern.extend([1, 2, 1])
            
            keyboard.adjust(*adjust_pattern)

            await message.edit_text(
                bots_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –±–æ—Ç–æ–≤: {e}")
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤",
                reply_markup=keyboard.as_markup()
            )

    async def show_quick_actions_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        total_bots = len(cm.BOT_CONFIGS)
        running_bots = sum(1 for bot in cm.BOT_CONFIGS.values() if bot.get("status") == "running")
        stopped_bots = total_bots - running_bots

        keyboard = InlineKeyboardBuilder()
        
        # –ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–∞–º–∏
        if stopped_bots > 0:
            keyboard.add(InlineKeyboardButton(text="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã", callback_data="quick_start_all"))
        if running_bots > 0:
            keyboard.add(InlineKeyboardButton(text="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã", callback_data="quick_stop_all"))
            keyboard.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="quick_restart_all"))
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.add(InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="quick_clear_logs"))
        keyboard.add(InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backup_create"))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        keyboard.add(InlineKeyboardButton(text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏", callback_data="menu_bots"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        keyboard.adjust(1, 2, 2, 2)

        menu_text = f"""‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**

ü§ñ **–ë–æ—Ç—ã:** {running_bots} —Ä–∞–±–æ—Ç–∞–µ—Ç / {stopped_bots} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è!

üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        await message.edit_text(
            menu_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def show_monitoring_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status"))
        keyboard.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="system_processes"))
        keyboard.add(InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="system_charts"))
        keyboard.add(InlineKeyboardButton(text="‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã", callback_data="system_alerts"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        keyboard.adjust(2, 2, 1)

        await message.edit_text(
            "üìà **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def show_settings_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"))
        keyboard.add(InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="settings_admins"))
        keyboard.add(InlineKeyboardButton(text="üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="settings_security"))
        keyboard.add(InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="settings_system"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        keyboard.adjust(2, 2, 1)

        await message.edit_text(
            "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def show_logs_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤"""
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(InlineKeyboardButton(text="üìÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", callback_data="logs_system"))
        keyboard.add(InlineKeyboardButton(text="ü§ñ –õ–æ–≥–∏ –±–æ—Ç–æ–≤", callback_data="logs_bots"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫", callback_data="logs_errors"))
        keyboard.add(InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="quick_clear_logs"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        keyboard.adjust(2, 2, 1)

        await message.edit_text(
            "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def quick_start_all_bots(self, callback: CallbackQuery):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...", show_alert=True)
        
        started = 0
        failed = 0
        
        for bot_id, bot_data in cm.BOT_CONFIGS.items():
            if bot_data.get("status") != "running":
                try:
                    success, message = bm.start_bot_thread(bot_id)
                    if success:
                        started += 1
                    else:
                        failed += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {message}")
                except Exception as e:
                    failed += 1
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        
        result_text = f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ: {started}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="ü§ñ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="menu_bots"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            f"üöÄ **–ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤**\n\n{result_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def quick_stop_all_bots(self, callback: CallbackQuery):
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        await callback.answer("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...", show_alert=True)
        
        stopped = 0
        failed = 0
        
        for bot_id, bot_data in cm.BOT_CONFIGS.items():
            if bot_data.get("status") == "running":
                try:
                    success, message = bm.stop_bot_thread(bot_id)
                    if success:
                        stopped += 1
                    else:
                        failed += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {message}")
                except Exception as e:
                    failed += 1
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        
        result_text = f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stopped}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="ü§ñ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="menu_bots"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            f"üõë **–ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤**\n\n{result_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def quick_restart_all_bots(self, callback: CallbackQuery):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...", show_alert=True)
        
        restarted = 0
        failed = 0
        
        for bot_id, bot_data in cm.BOT_CONFIGS.items():
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                if bot_data.get("status") == "running":
                    bm.stop_bot_thread(bot_id)
                    await asyncio.sleep(1)  # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º
                success, message = bm.start_bot_thread(bot_id)
                if success:
                    restarted += 1
                else:
                    failed += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {message}")
            except Exception as e:
                failed += 1
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        
        result_text = f"‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ: {restarted}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="ü§ñ –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="menu_bots"))
        keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            f"üîÑ **–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤**\n\n{result_text}",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    async def show_system_resources(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import psutil
            
            # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            cpu_freq = psutil.cpu_freq()
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            swap = psutil.swap_memory()
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage("/")
            
            # –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            net = psutil.net_io_counters()
            
            resources_text = f"""üíæ **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö**

üñ•Ô∏è **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu_percent}%
‚Ä¢ –Ø–¥–µ—Ä: {cpu_count}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq.current:.0f} MHz

üß† **–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {memory.available // 1024**3}GB

üíΩ **–î–∏—Å–∫:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {disk.free // 1024**3}GB

üåê **–°–µ—Ç—å:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {net.bytes_recv // 1024**2} MB
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net.bytes_sent // 1024**2} MB

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}"""

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_resources"))
            keyboard.add(InlineKeyboardButton(text="üñ•Ô∏è –ö —Å–∏—Å—Ç–µ–º–µ", callback_data="menu_system"))
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            keyboard.adjust(1)

            await message.edit_text(
                resources_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö: {e}")
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö",
                reply_markup=keyboard.as_markup()
            )

    async def show_system_processes(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        try:
            import psutil
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö Python (–±–æ—Ç–∞—Ö)
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    if 'python' in proc.info['name'].lower():
                        python_processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            processes_text = f"""üîÑ **–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã**

üêç **Python –ø—Ä–æ—Ü–µ—Å—Å—ã:** {len(python_processes)}
"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
            python_processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)
            for i, proc in enumerate(python_processes[:5]):
                processes_text += f"‚Ä¢ PID {proc['pid']}: CPU {proc['cpu_percent']:.1f}% RAM {proc['memory_percent']:.1f}%\n"
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            total_processes = len(list(psutil.process_iter()))
            processes_text += f"\nüìä **–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:** {total_processes}"

            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_processes"))
            keyboard.add(InlineKeyboardButton(text="üñ•Ô∏è –ö —Å–∏—Å—Ç–µ–º–µ", callback_data="menu_system"))
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            keyboard.adjust(1)

            await message.edit_text(
                processes_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö",
                reply_markup=keyboard.as_markup()
            )

    async def get_system_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage("/")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
            total_bots = len(cm.BOT_CONFIGS)
            running_bots = sum(
                1 for bot in cm.BOT_CONFIGS.values() if bot.get("status") == "running"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            if cpu_percent > 80:
                system_status = "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
            elif cpu_percent > 60:
                system_status = "üü° –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"
            else:
                system_status = "üü¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"

            status_text = f"""
üîÆ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ELECTRONICK Bot Manager**

üíª **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)
‚Ä¢ –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)

ü§ñ **–ë–æ—Ç—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {total_bots}
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {running_bots}
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {total_bots - running_bots}

üìä **–°—Ç–∞—Ç—É—Å:** {system_status}

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
            """

            return status_text.strip()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"

    async def get_bots_list(self) -> tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        try:
            bots_text = "ü§ñ **–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:**\n\n"
            keyboard = InlineKeyboardBuilder()

            if not cm.BOT_CONFIGS:
                bots_text += "üì≠ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                return bots_text, keyboard.as_markup()

            running_count = 0
            stopped_count = 0

            for bot_id, bot_data in cm.BOT_CONFIGS.items():
                status = bot_data.get("status", "stopped")
                status_emoji = "üü¢" if status == "running" else "üî¥"
                status_text = "–†–∞–±–æ—Ç–∞–µ—Ç" if status == "running" else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

                if status == "running":
                    running_count += 1
                else:
                    stopped_count += 1

                bot_name = bot_data["config"].get("bot_name", f"Bot {bot_id}")
                bots_text += f"{status_emoji} **{bot_name}** (ID: {bot_id})\n"
                bots_text += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n\n"

                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if status == "running":
                    keyboard.add(InlineKeyboardButton(
                        text=f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {bot_name[:20]}...", 
                        callback_data=f"stop_bot_{bot_id}"
                    ))
                    keyboard.add(InlineKeyboardButton(
                        text=f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {bot_name[:20]}...", 
                        callback_data=f"restart_bot_{bot_id}"
                    ))
                else:
                    keyboard.add(InlineKeyboardButton(
                        text=f"üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å {bot_name[:20]}...", 
                        callback_data=f"start_bot_{bot_id}"
                    ))
                    keyboard.add(InlineKeyboardButton(
                        text=f"‚ÑπÔ∏è –ò–Ω—Ñ–æ {bot_name[:20]}...", 
                        callback_data=f"info_bot_{bot_id}"
                    ))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bots_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {running_count} —Ä–∞–±–æ—Ç–∞–µ—Ç, {stopped_count} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.add(InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="menu_quick"))
            keyboard.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bots"))
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            bot_buttons_count = len(cm.BOT_CONFIGS) * 2
            adjust_pattern = [2] * (bot_buttons_count // 2)
            if bot_buttons_count % 2:
                adjust_pattern.append(1)
            adjust_pattern.extend([1, 2, 1])
            
            keyboard.adjust(*adjust_pattern)
            return bots_text, keyboard.as_markup()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤", keyboard.as_markup()

    async def get_detailed_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage("/")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
            total_bots = len(cm.BOT_CONFIGS)
            running_bots = sum(
                1 for bot in cm.BOT_CONFIGS.values() if bot.get("status") == "running"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –±–æ—Ç–æ–≤
            ai_bots = sum(
                1
                for bot in cm.BOT_CONFIGS.values()
                if bot["config"].get("enable_ai_responses", True)
            )
            voice_bots = sum(
                1
                for bot in cm.BOT_CONFIGS.values()
                if bot["config"].get("enable_voice_responses", False)
            )
            marketplace_bots = sum(
                1
                for bot in cm.BOT_CONFIGS.values()
                if bot["config"].get("marketplace", {}).get("enabled", False)
            )

            stats_text = f"""
üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üíª **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)
‚Ä¢ –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)

ü§ñ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤:**
‚Ä¢ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {total_bots}
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {running_bots}
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {total_bots - running_bots}
‚Ä¢ –ò–ò –±–æ—Ç—ã: {ai_bots}
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–æ—Ç—ã: {voice_bots}
‚Ä¢ –í –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ: {marketplace_bots}

üìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {'–í—ã—Å–æ–∫–∞—è' if cpu_percent > 80 else '–°—Ä–µ–¥–Ω—è—è' if cpu_percent > 60 else '–ù–∏–∑–∫–∞—è'}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {'–í—ã—Å–æ–∫–æ–µ' if memory.percent > 80 else '–°—Ä–µ–¥–Ω–µ–µ' if memory.percent > 60 else '–ù–∏–∑–∫–æ–µ'}
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {'–ú–∞–ª–æ' if disk.percent > 90 else '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' if disk.percent > 70 else '–ú–Ω–æ–≥–æ'}

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """

            return stats_text.strip()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    async def control_bot(self, bot_id: int, action: str) -> str:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º"""
        try:
            if bot_id not in cm.BOT_CONFIGS:
                return f"‚ùå –ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            bot_data = cm.BOT_CONFIGS[bot_id]
            bot_name = bot_data["config"].get("bot_name", f"Bot {bot_id}")

            if action == "start":
                if bot_data.get("status") == "running":
                    return f"‚ö†Ô∏è –ë–æ—Ç {bot_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω"

                success, message = bm.start_bot_thread(bot_id)
                if success:
                    return f"‚úÖ –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω"
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}: {message}"

            elif action == "stop":
                if bot_data.get("status") != "running":
                    return f"‚ö†Ô∏è –ë–æ—Ç {bot_name} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

                success, message = bm.stop_bot_thread(bot_id)
                if success:
                    return f"‚úÖ –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_name}: {message}"

            elif action == "restart":
                # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if bot_data.get("status") == "running":
                    bm.stop_bot_thread(bot_id)
                    await asyncio.sleep(2)  # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

                # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
                success, message = bm.start_bot_thread(bot_id)
                if success:
                    return f"‚úÖ –ë–æ—Ç {bot_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}: {message}"

            elif action == "info":
                status = bot_data.get("status", "unknown")
                config = bot_data.get("config", {})

                info_text = f"""
ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ {bot_name}**

üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ ID: {bot_id}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –ò–ò –æ—Ç–≤–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if config.get('enable_ai_responses', True) else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if config.get('enable_voice_responses', False) else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –í –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ: {'–î–∞' if config.get('marketplace', {}).get('enabled', False) else '–ù–µ—Ç'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {config.get('group_context_limit', 15)}
‚Ä¢ –ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞: {config.get('voice_model', 'tts-1')}
‚Ä¢ –¢–∏–ø –≥–æ–ª–æ—Å–∞: {config.get('voice_type', 'alloy')}
                """
                return info_text.strip()

            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º {bot_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º: {str(e)}"

    async def show_admin_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="update_check")
        )
        keyboard.add(InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backup_create"))
        keyboard.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="backup_list"))
        keyboard.add(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        keyboard.adjust(1)

        await message.edit_text(
            "üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown",
        )

    async def handle_backup_callback(self, callback: CallbackQuery, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
        if data == "backup_create":
            await callback.answer("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...", show_alert=True)
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
            await callback.message.answer("‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        elif data == "backup_list":
            await callback.answer("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤...", show_alert=True)
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
            await callback.message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤:\n‚Ä¢ backup_2025-01-27_12-00-00.zip\n‚Ä¢ backup_2025-01-26_12-00-00.zip"
            )

        elif data == "backup_cleanup":
            await callback.answer("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...", show_alert=True)
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤
            await callback.message.answer("‚úÖ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.monitoring_task:
            return

        self.monitoring_task = asyncio.create_task(self._monitoring_loop())
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.monitoring_task:
            self.monitoring_task.cancel()
            self.monitoring_task = None
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
                cpu_percent = psutil.cpu_percent()
                if cpu_percent > 80 and self.notifications.get("high_cpu", True):
                    await self.send_notification_to_all(
                        f"‚ö†Ô∏è **–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:** {cpu_percent}%"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
                if self.notifications.get("bot_status", True):
                    for bot_id, bot_data in cm.BOT_CONFIGS.items():
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
                        pass

                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(300)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def send_notification_to_all(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        for admin_id in self.admin_users:
            try:
                await self.bot.send_message(admin_id, message, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.is_running:
            return

        try:
            self.is_running = True
            await self.start_monitoring()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ signal handlers (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ)
            await self.dp.start_polling(self.bot, handle_signals=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AdminBot: {e}")
            self.is_running = False
        finally:
            await self.stop_monitoring()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.is_running:
            return

        try:
            self.is_running = False
            await self.stop_monitoring()
            await self.bot.session.close()
            logger.info("AdminBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AdminBot: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–±–æ—Ç–∞
admin_bot_instance: AdminBot | None = None


def get_admin_bot() -> AdminBot | None:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    return admin_bot_instance


def set_admin_bot(bot: AdminBot):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    global admin_bot_instance
    admin_bot_instance = bot

