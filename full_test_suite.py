#!/usr/bin/env python3
"""
üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø
–í—Å–µ —ç—Ç–∞–ø—ã –±–µ–∑ –∑–∞–≤–∏—Å–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥!
"""
import subprocess
import time
import os
import sys
import signal
import json
import requests
from requests.auth import HTTPBasicAuth

class AutoUpdateTester:
    def __init__(self):
        self.app_pid = None
        self.test_results = {}
        
    def log(self, message):
        print(f"[{time.strftime('%H:%M:%S')}] {message}")
        
    def step(self, step_name):
        print(f"\nüî∏ –≠–¢–ê–ü: {step_name}")
        print("=" * 60)
        
    def kill_existing_processes(self):
        """–£–±–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            result = subprocess.run(["pkill", "-f", "python.*app.py"], 
                                  capture_output=True, timeout=5)
            self.log("üõë –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            time.sleep(3)
            return True
        except Exception as e:
            self.log(f"‚ÑπÔ∏è –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return True
            
    def start_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            os.chdir("src")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            process = subprocess.Popen([
                sys.executable, "app.py"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            self.app_pid = process.pid
            self.log(f"üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å PID: {self.app_pid}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            with open("app.pid", "w") as f:
                f.write(str(self.app_pid))
                
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
            
    def wait_for_app_ready(self, max_attempts=20):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        for attempt in range(max_attempts):
            try:
                response = requests.get("http://localhost:60183/", timeout=2)
                if response.status_code in [200, 401]:
                    self.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
                    return True
            except:
                pass
            
            time.sleep(2)
            self.log(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        
        self.log("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
        
    def test_bot_stopping(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤"""
        try:
            self.log("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã)
            sys.path.append('.')
            from bot_manager import stop_all_bots_for_update
            from config_manager import BOT_CONFIGS
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
            running_count = 0
            for bot_id, bot_data in BOT_CONFIGS.items():
                if bot_data.get("status") == "running":
                    running_count += 1
                    
            self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {running_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
            
            if running_count == 0:
                self.log("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            start_time = time.time()
            success, message = stop_all_bots_for_update(total_timeout=30)
            duration = time.time() - start_time
            
            self.log(f"‚è±Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–Ω—è–ª–∞: {duration:.2f} —Å–µ–∫")
            self.log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –û–®–ò–ë–ö–ê'}")
            self.log(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
            self.test_results['bot_stopping'] = {
                'success': success,
                'duration': duration,
                'message': message
            }
            
            return success
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            self.test_results['bot_stopping'] = {'success': False, 'error': str(e)}
            return False
            
    def create_test_commit(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞"""
        try:
            os.chdir("..")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ README
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
            with open("README.md", "a", encoding='utf-8') as f:
                f.write(f"\n# Full test auto-update at {timestamp}\n")
            
            # –ö–æ–º–º–∏—Ç–∏–º
            subprocess.run(["git", "add", "README.md"], timeout=10, check=True)
            subprocess.run(["git", "commit", "-m", f"test: full auto-update test {timestamp}"], 
                          timeout=10, check=True)
            
            self.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
            
    def test_auto_update(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.log("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            start_time = time.time()
            response = requests.post(
                "http://localhost:60183/api/update",
                auth=HTTPBasicAuth('admin', 'securepassword123'),
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
            )
            
            duration = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                self.log(f"‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫")
                self.log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
                self.test_results['auto_update'] = {
                    'success': True,
                    'duration': duration,
                    'result': result
                }
                return True
            else:
                self.log(f"‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: HTTP {response.status_code}")
                self.log(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
                self.test_results['auto_update'] = {
                    'success': False,
                    'http_code': response.status_code,
                    'response': response.text
                }
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.test_results['auto_update'] = {'success': False, 'error': str(e)}
            return False
            
    def check_app_after_update(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è restart
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—Ç–≤–µ—Ç
            for attempt in range(15):
                try:
                    response = requests.get("http://localhost:60183/", timeout=3)
                    if response.status_code in [200, 401]:
                        self.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å—Ç–∞—Ç—É—Å
                        status_response = requests.get(
                            "http://localhost:60183/api/update/status",
                            auth=HTTPBasicAuth('admin', 'securepassword123'),
                            timeout=5
                        )
                        
                        if status_response.status_code == 200:
                            status_data = status_response.json()
                            self.log(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {status_data}")
                            
                            self.test_results['post_update_check'] = {
                                'success': True,
                                'status': status_data
                            }
                            return True
                        
                except:
                    pass
                
                time.sleep(2)
                self.log(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/15...")
            
            self.log("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            self.test_results['post_update_check'] = {'success': False}
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.test_results['post_update_check'] = {'success': False, 'error': str(e)}
            return False
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = f"""
üß™ –û–¢–ß–ï–¢ –û –ü–û–õ–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø
=====================================================
–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
"""
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –£–°–ü–ï–•" if result.get('success') else "‚ùå –û–®–ò–ë–ö–ê"
            report += f"\n{test_name}: {status}"
            if 'duration' in result:
                report += f" ({result['duration']:.1f}—Å)"
            if 'error' in result:
                report += f" - {result['error']}"
                
        report += f"\n\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: "
        all_success = all(r.get('success', False) for r in self.test_results.values())
        report += "‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!" if all_success else "‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!"
        
        return report
        
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        print("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.step("–ü–û–î–ì–û–¢–û–í–ö–ê")
        if not self.kill_existing_processes():
            return False
            
        # –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.step("–ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        if not self.start_app():
            return False
            
        if not self.wait_for_app_ready():
            return False
            
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤
        self.step("–¢–ï–°–¢ –û–°–¢–ê–ù–û–í–ö–ò –ë–û–¢–û–í")
        self.test_bot_stopping()
        
        # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        self.step("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–û–ú–ú–ò–¢–ê")
        if not self.create_test_commit():
            return False
            
        # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.step("–¢–ï–°–¢ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        if not self.test_auto_update():
            return False
            
        # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.step("–ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        self.check_app_after_update()
        
        # –≠—Ç–∞–ø 7: –û—Ç—á–µ—Ç
        self.step("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        report = self.generate_report()
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("test_report.txt", "w", encoding='utf-8') as f:
            f.write(report)
            
        return True

def main():
    tester = AutoUpdateTester()
    try:
        success = tester.run_full_test()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())

