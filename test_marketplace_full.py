#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –±–æ—Ç–æ–≤ v3.2.0
"""
import requests
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:60183"
AUTH = ("admin", "securepassword123")

def test_endpoint(method, url, auth=None, json_data=None, description=""):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint"""
    print(f"\nüß™ {description}")
    print(f"   {method} {url}")
    
    try:
        if method == "GET":
            response = requests.get(url, auth=auth, timeout=10)
        elif method == "POST":
            response = requests.post(url, auth=auth, json=json_data, timeout=10)
        elif method == "PUT":
            response = requests.put(url, auth=auth, json=json_data, timeout=10)
        elif method == "DELETE":
            response = requests.delete(url, auth=auth, timeout=10)
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code < 400:
            if 'application/json' in response.headers.get('content-type', ''):
                data = response.json()
                if isinstance(data, dict) and 'data' in data:
                    print(f"   ‚úÖ SUCCESS - Data items: {len(data.get('data', []))}")
                elif isinstance(data, dict) and 'success' in data:
                    print(f"   ‚úÖ SUCCESS - {data.get('message', 'OK')}")
                else:
                    print(f"   ‚úÖ SUCCESS - Response: {str(data)[:100]}...")
            else:
                print(f"   ‚úÖ SUCCESS - HTML content: {len(response.text)} chars")
        else:
            print(f"   ‚ùå ERROR - {response.text[:200]}")
            
        return response
        
    except Exception as e:
        print(f"   üí• EXCEPTION - {str(e)}")
        return None

def main():
    print("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot Manager v3.2.0 —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüìÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–ê–ù–ò–¶:")
    test_endpoint("GET", f"{BASE_URL}/", AUTH, description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    test_endpoint("GET", f"{BASE_URL}/marketplace", description="–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (–ø—É–±–ª–∏—á–Ω—ã–π)")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API v2 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    print("\nüìö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
    test_endpoint("GET", f"{BASE_URL}/api/v2/docs", AUTH, description="API v2 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Marketplace API
    print("\nüè™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MARKETPLACE API:")
    test_endpoint("GET", f"{BASE_URL}/api/marketplace/categories", description="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
    test_endpoint("GET", f"{BASE_URL}/api/marketplace/bots", description="–ë–æ—Ç—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
    test_endpoint("GET", f"{BASE_URL}/api/marketplace/bots?category=assistant", description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    test_endpoint("GET", f"{BASE_URL}/api/marketplace/bots?search=AI", description="–ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤")
    test_endpoint("GET", f"{BASE_URL}/api/marketplace/bots?featured=true", description="Featured –±–æ—Ç—ã")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API v2
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API v2:")
    test_endpoint("GET", f"{BASE_URL}/api/v2/system/health", AUTH, description="System health")
    test_endpoint("GET", f"{BASE_URL}/api/v2/system/info", AUTH, description="System info")
    test_endpoint("GET", f"{BASE_URL}/api/v2/bots", AUTH, description="–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ v2")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–û–í:")
    response = test_endpoint("GET", f"{BASE_URL}/api/bots", AUTH, description="–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ v1")
    if response and response.status_code == 200:
        bots = response.json()
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: {len(bots)}")
        
        for bot in bots:
            bot_id = bot['id']
            marketplace = bot['config'].get('marketplace', {})
            enabled = marketplace.get('enabled', False)
            print(f"   ü§ñ Bot {bot_id}: {bot['config']['bot_name']} - marketplace: {enabled}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
            if enabled:
                test_endpoint("GET", f"{BASE_URL}/marketplace/{bot_id}", description=f"–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞ {bot_id}")
    
    # 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print("\nüî® –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ë–û–¢–ê:")
    test_bot_data = {
        "bot_name": "Test Marketplace Bot",
        "telegram_token": "123456789:AABBccDDeeFFggHHiiJJkkLLmmNNooP_TEST",
        "openai_api_key": "sk-test1234567890abcdefghijklmnopqrstuvwxyz",
        "assistant_id": "asst_test123456789",
        "group_context_limit": 15,
        "enable_ai_responses": True,
        "enable_voice_responses": False,
        "marketplace": {
            "enabled": True,
            "title": "Test Bot for Marketplace",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
            "category": "productivity",
            "username": "test_marketplace_bot",
            "website": "https://test.example.com",
            "image_url": "https://via.placeholder.com/300x300/28a745/ffffff?text=TEST+BOT",
            "tags": ["—Ç–µ—Å—Ç", "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "productivity"],
            "featured": False,
            "rating": 3.5,
            "total_users": 42,
            "last_updated": datetime.now().strftime("%Y-%m-%d")
        }
    }
    
    create_response = test_endpoint("POST", f"{BASE_URL}/api/bots", AUTH, test_bot_data, 
                                  description="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    
    if create_response and create_response.status_code == 201:
        new_bot = create_response.json()
        new_bot_id = new_bot['id']
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ID: {new_bot_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
        time.sleep(1)
        marketplace_response = test_endpoint("GET", f"{BASE_URL}/api/marketplace/bots", 
                                           description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
        
        if marketplace_response and marketplace_response.status_code == 200:
            marketplace_bots = marketplace_response.json()
            bot_found = any(bot['id'] == new_bot_id for bot in marketplace_bots.get('data', []))
            print(f"   {'‚úÖ' if bot_found else '‚ùå'} –ë–æ—Ç {'–Ω–∞–π–¥–µ–Ω' if bot_found else '–ù–ï –Ω–∞–π–¥–µ–Ω'} –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ")

if __name__ == "__main__":
    main()
