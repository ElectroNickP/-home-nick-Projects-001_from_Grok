#!/bin/bash
set -e

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo ">>> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
if [ "$USER" = "root" ]; then
    echo "–ó–∞–ø—É—Å–∫ –æ—Ç root, —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å root"
else
    echo "–ó–∞–ø—É—Å–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER"
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ">>> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
sudo apt update
sudo apt install -y python3 python3-pip python3-venv ffmpeg git

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
PROJECT_DIR="/opt/telegram_gpt_bot"
echo ">>> –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
sudo mkdir -p "$PROJECT_DIR"
sudo chown "$USER:$USER" "$PROJECT_DIR"
cd "$PROJECT_DIR"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo ">>> –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv bot_env
source bot_env/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ">>> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
cat << 'EOF' > requirements.txt
openai
aiogram
python-dotenv
pydub
flask
flask_httpauth
EOF
pip install --upgrade pip
pip install -r requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
echo ">>> –°–æ–∑–¥–∞–Ω–∏–µ .gitignore..."
cat << 'EOF' > .gitignore
.env
__pycache__/
*.pyc
bot.log
bot_configs.json
nohup.out
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ server_and_bot.py
echo ">>> –°–æ–∑–¥–∞–Ω–∏–µ server_and_bot.py —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏..."
cat << 'EOF' > server_and_bot.py
#!/usr/bin/env python3
import os
import time
import asyncio
import threading
import logging
import json
import shutil
from flask import Flask, request, jsonify, render_template_string
from flask_httpauth import HTTPBasicAuth
from dotenv import load_dotenv
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
OPENAI_LOCK = threading.Lock()
BOT_CONFIGS_LOCK = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
auth = HTTPBasicAuth()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
USERS = {
    "admin": "securepassword123"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
}

@auth.verify_password
def verify_password(username, password):
    if username in USERS and USERS[username] == password:
        return username
    return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
BOT_CONFIGS = {}
NEXT_BOT_ID = 1
CONVERSATIONS = {}
CONFIG_FILE = "bot_configs.json"

def load_configs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global NEXT_BOT_ID
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                data = json.load(f)
                BOT_CONFIGS.clear()
                BOT_CONFIGS.update({int(k): v for k, v in data["bots"].items()})
                NEXT_BOT_ID = max([int(k) for k in data["bots"].keys()] + [0]) + 1
                logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            logger.info("–§–∞–π–ª bot_configs.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")

def save_configs_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    def save_task():
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
            statvfs = os.statvfs('/')
            free_space = statvfs.f_bavail * statvfs.f_frsize
            if free_space < 1024 * 1024:  # –ú–µ–Ω—å—à–µ 1 –ú–ë
                logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ bot_configs.json")
                raise OSError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")

            if os.path.exists(CONFIG_FILE) and not os.access(CONFIG_FILE, os.W_OK):
                logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {CONFIG_FILE}")
                raise PermissionError(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {CONFIG_FILE}")

            with BOT_CONFIGS_LOCK:
                logger.debug("–ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª: –Ω–∞—á–∞—Ç–∞")
                data = {"bots": {str(k): v for k, v in BOT_CONFIGS.items()}}
                temp_file = CONFIG_FILE + '.tmp'
                with open(temp_file, 'w') as f:
                    json.dump(data, f, indent=2)
                os.replace(temp_file, CONFIG_FILE)
                logger.debug("–ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª: –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            raise

    thread = threading.Thread(target=save_task, daemon=True)
    thread.start()
    thread.join(timeout=5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
    if thread.is_alive():
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å")
        raise TimeoutError("–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

async def ask_openai(prompt, config, conversation_key):
    try:
        with OPENAI_LOCK:
            prev_key = openai.api_key if hasattr(openai, 'api_key') else None
            openai.api_key = config["openai_api_key"]
            if conversation_key in CONVERSATIONS:
                thread_id = CONVERSATIONS[conversation_key]
            else:
                thread_resp = openai.beta.threads.create()
                thread_id = thread_resp.id
                CONVERSATIONS[conversation_key] = thread_id
            openai.beta.threads.messages.create(thread_id=thread_id, role="user", content=prompt)
            run_resp = openai.beta.threads.runs.create(thread_id=thread_id, assistant_id=config["assistant_id"])
        start_time = time.time()
        timeout = 30
        while True:
            with OPENAI_LOCK:
                status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_resp.id).status
            if status == "completed":
                break
            if time.time() - start_time > timeout:
                return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI."
            await asyncio.sleep(2)
        with OPENAI_LOCK:
            messages = openai.beta.threads.messages.list(thread_id=thread_id).data
            if prev_key is not None:
                openai.api_key = prev_key
        return messages[0].content[0].text.value
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ ask_openai:")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

async def aiogram_bot(config, stop_event):
    bot = Bot(token=config["telegram_token"], default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    @dp.message(Command(commands=["start"]))
    async def cmd_start(message: types.Message):
        text = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {config.get('bot_name', '')}. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ OpenAI."
        await message.answer(text)
        logger.info(f"User({message.from_user.id}) -> /start: {text} (–±–æ—Ç: {config.get('bot_name', '')})")

    @dp.message()
    async def handle_message(message: types.Message):
        user_text = message.text
        conversation_key = f"{config['telegram_token']}_{message.from_user.id}"
        logger.info(f"User({message.from_user.id}) ({config.get('bot_name', '')}): {user_text}")
        response = await ask_openai(user_text, config, conversation_key)
        await message.answer(response)
        logger.info(f"–ë–æ—Ç ({config.get('bot_name', '')}): {response}")

    logger.info(f"–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ {config.get('bot_name', '')}...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        stop_wait_task = asyncio.create_task(stop_event.wait())
        polling_task = asyncio.create_task(dp.start_polling(bot, handle_signals=False))
        done, pending = await asyncio.wait([polling_task, stop_wait_task], return_when=asyncio.FIRST_COMPLETED)
        if stop_wait_task in done:
            polling_task.cancel()
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ {config.get('bot_name', '')} –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ {config.get('bot_name', '')}:")
    finally:
        await bot.session.close()

def run_bot(bot_entry):
    loop = asyncio.new_event_loop()
    bot_entry["loop"] = loop
    bot_entry["status"] = "running"
    stop_event = asyncio.Event()
    bot_entry["stop_event"] = stop_event
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(aiogram_bot(bot_entry["config"], stop_event))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –±–æ—Ç–∞ {bot_entry['config'].get('bot_name', '')}:")
    finally:
        bot_entry["status"] = "stopped"
        loop.close()
        bot_entry["loop"] = None
        bot_entry["thread"] = None
        bot_entry["stop_event"] = None

def serialize_bot_entry(bot_entry):
    return {
        "id": bot_entry["id"],
        "config": bot_entry["config"],
        "status": bot_entry["status"]
    }

MAIN_PAGE_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–∞–º–∏</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
</head>
<body>
<div class="container">
    <h1 class="mt-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–∞–º–∏</h1>
    <div class="card mt-4">
        <div class="card-header">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</div>
        <div class="card-body">
            <form id="createBotForm">
                <div class="form-group">
                    <label for="bot_name">–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞</label>
                    <input type="text" class="form-control" id="bot_name" required>
                </div>
                <div class="form-group">
                    <label for="telegram_token">Telegram Token</label>
                    <input type="text" class="form-control" id="telegram_token" required>
                </div>
                <div class="form-group">
                    <label for="openai_api_key">OpenAI API Key</label>
                    <input type="text" class="form-control" id="openai_api_key" required>
                </div>
                <div class="form-group">
                    <label for="assistant_id">Assistant ID</label>
                    <input type="text" class="form-control" id="assistant_id" required>
                </div>
                <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞</button>
            </form>
        </div>
    </div>
    <h2 class="mt-4">–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤</h2>
    <table class="table table-bordered" id="botsTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>Telegram Token</th>
                <th>OpenAI API Key</th>
                <th>Assistant ID</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
        </thead>
        <tbody>
            {% for bot in bots %}
            <tr data-bot-id="{{ bot.id }}">
                <td>{{ bot.id }}</td>
                <td><span class="bot-name">{{ bot.config.bot_name }}</span></td>
                <td><span class="bot-token">{{ bot.config.telegram_token }}</span></td>
                <td><span class="bot-openai">{{ bot.config.openai_api_key }}</span></td>
                <td><span class="bot-assistant">{{ bot.config.assistant_id }}</span></td>
                <td class="bot-status">{{ bot.status }}</td>
                <td>
                    <button class="btn btn-sm btn-success start-btn">–°—Ç–∞—Ä—Ç</button>
                    <button class="btn btn-sm btn-warning stop-btn">–°—Ç–æ–ø</button>
                    <button class="btn btn-sm btn-info edit-btn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn btn-sm btn-danger delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
          <span aria-hidden="true">√ó</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="editBotForm">
            <input type="hidden" id="edit_bot_id">
            <div class="form-group">
                <label for="edit_bot_name">–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞</label>
                <input type="text" class="form-control" id="edit_bot_name" required>
            </div>
            <div class="form-group">
                <label for="edit_telegram_token">Telegram Token</label>
                <input type="text" class="form-control" id="edit_telegram_token" required>
            </div>
            <div class="form-group">
                <label for="edit_openai_api_key">OpenAI API Key</label>
                <input type="text" class="form-control" id="edit_openai_api_key" required>
            </div>
            <div class="form-group">
                <label for="edit_assistant_id">Assistant ID</label>
                <input type="text" class="form-control" id="edit_assistant_id" required>
            </div>
            <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.bundle.min.js"></script>
<script>
$(document).ready(function() {
    $("#createBotForm").submit(function(e) {
        e.preventDefault();
        var data = {
            bot_name: $("#bot_name").val(),
            telegram_token: $("#telegram_token").val(),
            openai_api_key: $("#openai_api_key").val(),
            assistant_id: $("#assistant_id").val()
        };
        $.ajax({
            url: "/api/bots",
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function(response) {
                alert("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                location.reload();
            },
            error: function(xhr) {
                var errorMsg = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: " + errorMsg);
            }
        });
    });

    $(".edit-btn").click(function() {
        var row = $(this).closest("tr");
        var botId = row.data("bot-id");
        $("#edit_bot_id").val(botId);
        $("#edit_bot_name").val(row.find(".bot-name").text());
        $("#edit_telegram_token").val(row.find(".bot-token").text());
        $("#edit_openai_api_key").val(row.find(".bot-openai").text());
        $("#edit_assistant_id").val(row.find(".bot-assistant").text());
        $("#editModal").modal("show");
    });

    $("#editBotForm").submit(function(e) {
        e.preventDefault();
        var botId = $("#edit_bot_id").val();
        var data = {
            bot_name: $("#edit_bot_name").val(),
            telegram_token: $("#edit_telegram_token").val(),
            openai_api_key: $("#edit_openai_api_key").val(),
            assistant_id: $("#edit_assistant_id").val()
        };
        $.ajax({
            url: "/api/bots/" + botId,
            method: "PUT",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function(response) {
                $("#editModal").modal("hide");
                alert("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
                location.reload();
            },
            error: function(xhr) {
                var errorMsg = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: " + errorMsg);
            }
        });
    });

    $(".delete-btn").click(function() {
        if (!confirm("–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞?")) return;
        var row = $(this).closest("tr");
        var botId = row.data("bot-id");
        $.ajax({
            url: "/api/bots/" + botId,
            method: "DELETE",
            success: function(response) {
                alert("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
                location.reload();
            },
            error: function(xhr) {
                var errorMsg = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: " + errorMsg);
            }
        });
    });

    $(".start-btn").click(function() {
        var row = $(this).closest("tr");
        var botId = row.data("bot-id");
        $.ajax({
            url: "/api/bots/" + botId + "/start",
            method: "POST",
            success: function(response) {
                alert("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
                location.reload();
            },
            error: function(xhr) {
                var errorMsg = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: " + errorMsg);
            }
        });
    });

    $(".stop-btn").click(function() {
        var row = $(this).closest("tr");
        var botId = row.data("bot-id");
        $.ajax({
            url: "/api/bots/" + botId + "/stop",
            method: "POST",
            success: function(response) {
                alert("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                location.reload();
            },
            error: function(xhr) {
                var errorMsg = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: " + errorMsg);
            }
        });
    });
});
</script>
</body>
</html>
"""

@app.route("/")
@auth.login_required
def index_page():
    with BOT_CONFIGS_LOCK:
        bots_list = list(BOT_CONFIGS.values())
    return render_template_string(MAIN_PAGE_TEMPLATE, bots=bots_list)

@app.route("/api/bots", methods=["GET"])
@auth.login_required
def get_bots():
    with BOT_CONFIGS_LOCK:
        return jsonify([serialize_bot_entry(bot) for bot in BOT_CONFIGS.values()])

@app.route("/api/bots", methods=["POST"])
@auth.login_required
def create_bot():
    global NEXT_BOT_ID
    data = request.get_json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞: {data}")
    required_fields = ["bot_name", "telegram_token", "openai_api_key", "assistant_id"]
    for field in required_fields:
        if field not in data or not data[field]:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            return jsonify({"error": f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400
    try:
        with BOT_CONFIGS_LOCK:
            logger.debug("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ BOT_CONFIGS_LOCK –ø–æ–ª—É—á–µ–Ω–∞")
            bot_id = NEXT_BOT_ID
            NEXT_BOT_ID += 1
            bot_entry = {
                "id": bot_id,
                "config": {
                    "bot_name": data["bot_name"],
                    "telegram_token": data["telegram_token"],
                    "openai_api_key": data["openai_api_key"],
                    "assistant_id": data["assistant_id"],
                },
                "status": "stopped",
                "thread": None,
                "loop": None,
                "stop_event": None,
            }
            BOT_CONFIGS[bot_id] = bot_entry
            logger.debug(f"–ë–æ—Ç {bot_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ BOT_CONFIGS")
        save_configs_async()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        logger.debug("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ BOT_CONFIGS_LOCK –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return jsonify(serialize_bot_entry(bot_entry)), 201
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/api/bots/<int:bot_id>", methods=["PUT"])
@auth.login_required
def update_bot(bot_id):
    data = request.get_json()
    try:
        with BOT_CONFIGS_LOCK:
            if bot_id not in BOT_CONFIGS:
                logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            bot_entry = BOT_CONFIGS[bot_id]
            if bot_entry["status"] == "running":
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç {bot_id}")
                return jsonify({"error": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"}), 400
            for field in ["bot_name", "telegram_token", "openai_api_key", "assistant_id"]:
                if field in data:
                    bot_entry["config"][field] = data[field]
        save_configs_async()
        logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return jsonify(serialize_bot_entry(bot_entry))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/api/bots/<int:bot_id>", methods=["DELETE"])
@auth.login_required
def delete_bot(bot_id):
    try:
        with BOT_CONFIGS_LOCK:
            if bot_id not in BOT_CONFIGS:
                logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            bot_entry = BOT_CONFIGS[bot_id]
            if bot_entry["status"] == "running":
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç {bot_id}")
                return jsonify({"error": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"}), 400
            del BOT_CONFIGS[bot_id]
        save_configs_async()
        logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return jsonify({"success": True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/api/bots/<int:bot_id>/start", methods=["POST"])
@auth.login_required
def start_bot(bot_id):
    try:
        with BOT_CONFIGS_LOCK:
            if bot_id not in BOT_CONFIGS:
                logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            bot_entry = BOT_CONFIGS[bot_id]
            if bot_entry["status"] == "running":
                logger.error(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"}), 400
            t = threading.Thread(target=run_bot, args=(bot_entry,), daemon=True)
            bot_entry["thread"] = t
            t.start()
            logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return jsonify({"success": True, "bot": serialize_bot_entry(bot_entry)})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route("/api/bots/<int:bot_id>/stop", methods=["POST"])
@auth.login_required
def stop_bot(bot_id):
    try:
        with BOT_CONFIGS_LOCK:
            if bot_id not in BOT_CONFIGS:
                logger.error(f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            bot_entry = BOT_CONFIGS[bot_id]
            if bot_entry["status"] != "running":
                logger.error(f"–ë–æ—Ç {bot_id} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return jsonify({"error": "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"}), 400
            if bot_entry["loop"] and bot_entry["stop_event"]:
                bot_entry["loop"].call_soon_threadsafe(bot_entry["stop_event"].set)
                logger.info(f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return jsonify({"success": True, "bot": serialize_bot_entry(bot_entry)})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

def start_all_bots():
    with BOT_CONFIGS_LOCK:
        for bot_id, bot_entry in BOT_CONFIGS.items():
            if bot_entry["status"] == "stopped":
                t = threading.Thread(target=run_bot, args=(bot_entry,), daemon=True)
                bot_entry["thread"] = t
                t.start()
                logger.info(f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_entry['config'].get('bot_name', '')}")

if __name__ == '__main__':
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w') as f:
            json.dump({"bots": {}}, f)
        os.chmod(CONFIG_FILE, 0o664)
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª bot_configs.json")
    elif not os.access(CONFIG_FILE, os.W_OK):
        logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {CONFIG_FILE}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        os.chmod(CONFIG_FILE, 0o664)
        logger.info(f"–ü—Ä–∞–≤–∞ –Ω–∞ {CONFIG_FILE} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")

    load_configs()
    start_all_bots()
    logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:5000 —Å –≤–Ω–µ—à–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º")
    app.run(host="0.0.0.0", port=5000, debug=False, threaded=True)
EOF

chmod +x server_and_bot.py

echo ">>> –°–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞..."
sudo bash -c "cat <<EOF > /etc/systemd/system/telegram-gpt-bot.service
[Unit]
Description=Telegram GPT Bot Service
After=network.target

[Service]
ExecStart=$PROJECT_DIR/bot_env/bin/python3 $PROJECT_DIR/server_and_bot.py
WorkingDirectory=$PROJECT_DIR
Restart=always
User=$USER
Environment=PATH=$PROJECT_DIR/bot_env/bin:/usr/local/bin:/usr/bin:/bin

[Install]
WantedBy=multi-user.target
EOF"

echo ">>> –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
sudo systemctl daemon-reload
sudo systemctl enable telegram-gpt-bot.service
sudo systemctl start telegram-gpt-bot.service

echo ">>> –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞..."
sudo systemctl status telegram-gpt-bot.service

echo ">>> –ì–æ—Ç–æ–≤–æ! –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://<–≤–∞—à_IP>:5000 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: securepassword123)."
echo ">>> –ò–∑–º–µ–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ server_and_bot.py –≤ —Ä–∞–∑–¥–µ–ª–µ USERS."