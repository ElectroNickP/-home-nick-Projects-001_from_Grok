#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å–µ—Å—Å–∏–π
"""

import requests
import json
import time
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:60183"
CREDENTIALS = ("admin", "securepassword123")

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Flask"""
    
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()
        self.logged_in = False
    
    def login(self, username, password):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/api/login"
        data = {"username": username, "password": password}
        headers = {"Content-Type": "application/json"}
        
        response = self.session.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                self.logged_in = True
                log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API")
                return True
        
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
        return False
    
    def get(self, endpoint):
        """GET –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Å—Å–∏–µ–π"""
        url = f"{self.base_url}{endpoint}"
        return self.session.get(url)
    
    def post(self, endpoint, data=None):
        """POST –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Å—Å–∏–µ–π"""
        url = f"{self.base_url}{endpoint}"
        headers = {"Content-Type": "application/json"}
        return self.session.post(url, json=data, headers=headers)
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.get("/logout")
        self.logged_in = False
        log("‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

def test_authentication(session_mgr):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    log("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    response = session_mgr.get("/api/v2/system/health")
    if response.status_code == 401:
        log("‚úÖ API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)")
    else:
        log("‚ùå API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)", "ERROR")
        return False
    
    # –¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    if session_mgr.login(*CREDENTIALS):
        response = session_mgr.get("/api/v2/system/health")
        if response.status_code == 200:
            log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
            return False
    else:
        return False

def test_system_endpoints(session_mgr):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö API endpoints"""
    log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö endpoints...")
    
    endpoints = [
        ("GET", "/api/v2/system/health", "Health Check"),
        ("GET", "/api/v2/system/info", "System Info"),
        ("GET", "/api/v2/system/stats", "System Stats"),
    ]
    
    for method, endpoint, name in endpoints:
        if method == "GET":
            response = session_mgr.get(endpoint)
        else:
            response = session_mgr.post(endpoint)
            
        if response.status_code == 200:
            log(f"‚úÖ {name}: {endpoint}")
        else:
            log(f"‚ùå {name}: {endpoint} - {response.status_code}", "ERROR")
            return False
    
    return True

def test_bots_endpoints(session_mgr):
    """–¢–µ—Å—Ç API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    log("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
    response = session_mgr.get("/api/v2/bots")
    if response.status_code == 200:
        bots_data = response.json()
        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤: {len(bots_data.get('data', []))} –±–æ—Ç–æ–≤")
        
        bots_list = bots_data.get('data', [])
        if isinstance(bots_list, list) and len(bots_list) > 0:
            bot_id = bots_list[0]['id']
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
            status_response = session_mgr.get(f"/api/v2/bots/{bot_id}/status")
            if status_response.status_code == 200:
                log(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {bot_id} –ø–æ–ª—É—á–µ–Ω")
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_id}", "ERROR")
                return False
        else:
            log("‚ö†Ô∏è –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {response.status_code}", "ERROR")
        return False
    
    return True

def test_marketplace_api():
    """–¢–µ—Å—Ç API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)"""
    log("üè™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...")
    
    # –ü—É–±–ª–∏—á–Ω—ã–π endpoint –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    response = requests.get(f"{BASE_URL}/api/marketplace/bots")
    if response.status_code == 200:
        marketplace_data = response.json()
        log(f"‚úÖ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å API —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(marketplace_data.get('data', []))} –±–æ—Ç–æ–≤")
        return True
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ API: {response.status_code}", "ERROR")
        return False

def test_web_interface():
    """–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
    response = requests.get(f"{BASE_URL}/")
    if response.status_code in [401, 302]:
        log("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞—â–∏—â–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    else:
        log(f"‚ö†Ô∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    response = requests.get(f"{BASE_URL}/login")
    if response.status_code == 200:
        log("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
        return False
    
    # –¢–µ—Å—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–ø—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    response = requests.get(f"{BASE_URL}/marketplace")
    if response.status_code == 200:
        log("‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {response.status_code}", "ERROR")
        return False
    
    return True

def test_new_interface_features(session_mgr):
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    log("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    response = session_mgr.get("/")
    if response.status_code == 200:
        content = response.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        new_features = [
            "bots-dashboard",
            "stats-cards", 
            "filter-buttons",
            "bots-grid",
            "bot-card",
            "feature-badges",
            "action-buttons"
        ]
        
        missing_features = []
        for feature in new_features:
            if feature not in content:
                missing_features.append(feature)
        
        if missing_features:
            log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {missing_features}", "ERROR")
            return False
        else:
            log("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π
        css_features = [
            "linear-gradient",
            "backdrop-filter",
            "grid-template-columns",
            "animation: fadeInUp"
        ]
        
        missing_css = []
        for css in css_features:
            if css not in content:
                missing_css.append(css)
        
        if missing_css:
            log(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç CSS —Å—Ç–∏–ª–∏: {missing_css}", "WARNING")
        else:
            log("‚úÖ –í—Å–µ CSS —Å—Ç–∏–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return True
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {response.status_code}", "ERROR")
        return False

def test_bot_management(session_mgr):
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ API"""
    log("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
    response = session_mgr.get("/api/v2/bots")
    if response.status_code != 200:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤", "ERROR")
        return False
    
    bots_data = response.json()
    bots = bots_data.get('data', [])
    
    if not isinstance(bots, list) or not bots:
        log("‚ö†Ô∏è –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return True
    
    bot_id = bots[0]['id']
    log(f"üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º {bot_id}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    response = session_mgr.get(f"/api/v2/bots/{bot_id}")
    if response.status_code == 200:
        log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.status_code}", "ERROR")
        return False
    
    return True

def test_update_system(session_mgr):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    response = session_mgr.get("/api/check-updates")
    if response.status_code == 200:
        update_data = response.json()
        log(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç: {update_data.get('has_updates', False)}")
        return True
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    log("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
    session_mgr = SessionManager(BASE_URL)
    
    tests = [
        ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", lambda: test_authentication(session_mgr)),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints", lambda: test_system_endpoints(session_mgr)),
        ("API –±–æ—Ç–æ–≤", lambda: test_bots_endpoints(session_mgr)),
        ("API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞", test_marketplace_api),
        ("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", test_web_interface),
        ("–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", lambda: test_new_interface_features(session_mgr)),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏", lambda: test_bot_management(session_mgr)),
        ("–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", lambda: test_update_system(session_mgr)),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        log(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
                log(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                log(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù", "ERROR")
        except Exception as e:
            import traceback
            log(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {str(e)}", "ERROR")
            log(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}", "ERROR")
    
    # –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    session_mgr.logout()
    
    log("=" * 60)
    log(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        log(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.", "WARNING")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
